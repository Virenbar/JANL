# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  tags:
    include:
    - v*
  branches:
    include:
    - master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1
  displayName: 'NuGet Install'

- task: DotNetCoreCLI@2
  displayName: 'Install minver-cli'
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install --global minver-cli --version 2.5.0'

- task: NuGetCommand@2
  displayName: 'Restore solution'
  inputs:
    restoreSolution: '$(solution)'

- task: PowerShell@2
  displayName: 'Version script'
  inputs:
    targetType: 'inline'
    script: |
      $version = minver -t v -d preview
      $number = $version.Split('-')[0]
      Write-Host "Version: $version"
      Write-Host "##vso[task.setvariable variable=Version]$version"
      Write-Host "##vso[task.setvariable variable=Number]$number"
      Write-Host "##vso[build.updatebuildnumber]$number-$(Build.BuildId)"

- task: Assembly-Info-NetFramework@2
  displayName: 'Set Assembly Version'
  inputs:
    Path: '$(Build.SourcesDirectory)'
    FileNames: |
      **\AssemblyInfo.cs
      **\AssemblyInfo.vb
    InsertAttributes: false
    FileEncoding: 'auto'
    WriteBOM: false
    VersionNumber: '$(Number)'
    LogLevel: 'verbose'
    FailOnWarning: false
    DisableTelemetry: false

- task: VSBuild@1
  displayName: 'Build'
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

#- task: VSTest@2
#  displayName: 'Test'
#  inputs:
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'

- task: NuGetCommand@2
  displayName: 'Pack NuGet'
  inputs:
    command: 'pack'
    packagesToPack: '**/*.nuspec'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'Version'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'artifact'
    publishLocation: 'Container'